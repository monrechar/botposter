import telebot
from telebot import types
import re

bot_token = ''
bot = telebot.TeleBot(bot_token)
public_channel_id = ''
vip_channel_id = ''

def generate_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('/start'))
    keyboard.add(types.KeyboardButton('/help'))
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –≤–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é
    return keyboard


def send_template_to_channels(chat_id, template, public, vip):
    if public:
        bot.send_message(public_channel_id, template, parse_mode='Markdown', disable_web_page_preview=True)
    if vip:
        bot.send_message(vip_channel_id, template, parse_mode='Markdown', disable_web_page_preview=True)
    bot.send_message(chat_id, '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', reply_markup=None)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    fake_message_json = {
        'message_id': None,
        'from_user': None,
        'date': None,
        'chat': {'id': chat_id, 'type': 'private'},
        'text': None
    }
    fake_message = types.Message.de_json(fake_message_json)
    start_command(fake_message)


def send_to_channels_callback(message, template):
    chat_id = message.chat.id
    text = message.text

    if text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Public':
        send_template_to_channels(chat_id, template, True, False)
    elif text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ VIP':
        send_template_to_channels(chat_id, template, False, True)
    elif text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ–±–∞ –∫–∞–Ω–∞–ª–∞':
        send_template_to_channels(chat_id, template, True, True)
    else:
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:')
        bot.register_next_step_handler(message, send_to_channels_callback, template)

def show_send_channels_button(chat_id, template):
    send_channels_keyboard = types.ReplyKeyboardMarkup(row_width=3)
    send_public_button = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Public')
    send_vip_button = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ VIP')
    send_both_button = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ–±–∞ –∫–∞–Ω–∞–ª–∞')
    send_channels_keyboard.add(send_public_button, send_vip_button, send_both_button)

    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', reply_markup=send_channels_keyboard)
    bot.register_next_step_handler_by_chat_id(chat_id, send_to_channels_callback, template)  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
signals = {}

@bot.message_handler(commands=['start'])
def start_command(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    signal_button = types.KeyboardButton('–°–∏–≥–Ω–∞–ª')
    update_entry_button = types.KeyboardButton('UPDATE –í—Ö–æ–¥')
    update_tp_button = types.KeyboardButton('UPDATE –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç')
    cancel_order_button = types.KeyboardButton('UPDATE –û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏/SL/–ë–£')
    keyboard.add(signal_button, update_entry_button, update_tp_button, cancel_order_button)

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == '–°–∏–≥–Ω–∞–ª')
def signal_command(message):
    chat_id = message.chat.id
    signals[chat_id] = {}
    bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä:')
    bot.register_next_step_handler(message, ticker_callback)

def is_valid_number(text):
    return re.match(r'^\d+([.,]\d+)?$', text)

def ticker_callback(message):
    chat_id = message.chat.id
    text = message.text.upper()
    if not text.isalpha():
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –±—É–∫–≤–∞–º–∏:')
        bot.register_next_step_handler(message, ticker_callback)
    else:
        signals[chat_id]['ticker'] = text
        position_keyboard = types.ReplyKeyboardMarkup(row_width=2)
        long_button = types.KeyboardButton('LONG')
        short_button = types.KeyboardButton('SHORT')
        position_keyboard.add(long_button, short_button)
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é:', reply_markup=position_keyboard)
        bot.register_next_step_handler(message, position_callback)

def position_callback(message):
    chat_id = message.chat.id
    text = message.text.upper()
    if text not in ['LONG', 'SHORT']:
        position_keyboard = types.ReplyKeyboardMarkup(row_width=2)
        long_button = types.KeyboardButton('LONG')
        short_button = types.KeyboardButton('SHORT')
        position_keyboard.add(long_button, short_button)
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é:', reply_markup=position_keyboard)
        bot.register_next_step_handler(message, position_callback)
    else:
        signals[chat_id]['position'] = text
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞:', reply_markup=None)
        bot.register_next_step_handler(message, entry_callback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å "–í—Ö–æ–¥"
def entry_callback(message):
    chat_id = message.chat.id
    text = message.text
    if not is_valid_number(text):
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ —á–∏—Å–ª–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ—á–∫—É –∏–ª–∏ –∑–∞–ø—è—Ç—É—é:')
        bot.register_next_step_handler(message, entry_callback)
    else:
        signals[chat_id]['entry'] = float(text.replace(',', '.'))
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å:', reply_markup=None)
        bot.register_next_step_handler(message, target_callback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å "–¶–µ–ª—å"
def target_callback(message):
    chat_id = message.chat.id
    text = message.text
    if not is_valid_number(text):
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å —á–∏—Å–ª–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ—á–∫—É –∏–ª–∏ –∑–∞–ø—è—Ç—É—é:')
        bot.register_next_step_handler(message, target_callback)
    else:
        signals[chat_id]['target'] = float(text.replace(',', '.'))
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å:', reply_markup=None)
        bot.register_next_step_handler(message, stop_callback)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å "–°—Ç–æ–ø"
def stop_callback(message):
    chat_id = message.chat.id
    text = message.text
    if not is_valid_number(text):
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å —á–∏—Å–ª–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ—á–∫—É –∏–ª–∏ –∑–∞–ø—è—Ç—É—é:')
        bot.register_next_step_handler(message, stop_callback)
    else:
        signals[chat_id]['stop'] = float(text.replace(',', '.'))
        signal_template = f"‚ö°Ô∏è –°–∏–≥–Ω–∞–ª: #{signals[chat_id]['ticker']} #{signals[chat_id]['position']}\n\nüèÅ –í—Ö–æ–¥: {signals[chat_id]['entry']}\n\nüéØ –¶–µ–ª—å: {signals[chat_id]['target']}\n\nüõë –°—Ç–æ–ø: {signals[chat_id]['stop']}\n\n–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n1. [–ú–µ—Ç–æ–¥–∏—á–∫–∞ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É](https://t.me/+u-G1owdlk_0yZWY8)\n2. [–í–∏–¥–µ–æ–≥–∞–π–¥ –ø–æ —Ä–∞–±–æ—Ç–µ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏](https://www.youtube.com/watch?v=QUxCFv3uBVI)"
        bot.send_message(chat_id, signal_template, parse_mode='Markdown', disable_web_page_preview=True)

        show_send_channels_button(chat_id, signal_template)
        # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        signals[chat_id] = {}



@bot.message_handler(func=lambda message: message.text == 'UPDATE –í—Ö–æ–¥')
def update_entry_command(message):
    chat_id = message.chat.id
    signals[chat_id] = {}
    bot.send_message(chat_id, '–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä:')
    bot.register_next_step_handler(message, update_ticker_callback)

def update_ticker_callback(message):
    chat_id = message.chat.id
    text = message.text.upper()
    if not text.isalpha():
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –±—É–∫–≤–∞–º–∏:')
        bot.register_next_step_handler(message, update_ticker_callback)
    else:
        signals[chat_id]['ticker'] = text
        update_entry_keyboard = types.ReplyKeyboardMarkup(row_width=3)
        one_entry_button = types.KeyboardButton('1 –≤—Ö–æ–¥')
        two_entries_button = types.KeyboardButton('2 –≤—Ö–æ–¥–∞')
        three_entries_button = types.KeyboardButton('3 –≤—Ö–æ–¥–∞')
        update_entry_keyboard.add(one_entry_button, two_entries_button, three_entries_button)
        bot.send_message(chat_id, '–°–∫–æ–ª—å–∫–æ –≤—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å?', reply_markup=update_entry_keyboard)
        bot.register_next_step_handler(message, update_entry_choice_callback)

def update_entry_choice_callback(message):
    chat_id = message.chat.id
    text = message.text
    if text not in ['1 –≤—Ö–æ–¥', '2 –≤—Ö–æ–¥–∞', '3 –≤—Ö–æ–¥–∞']:
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:')
        bot.register_next_step_handler(message, update_entry_choice_callback)
    else:
        num_of_entries = int(text[0])
        update_template = f"UPDATE‚ùóÔ∏è #{signals[chat_id]['ticker']}\n\n"
        for i in range(num_of_entries):
            update_template += f"–í—Ö–æ–¥ {i + 1} - ‚úÖ\n\n"
        bot.send_message(chat_id, update_template, parse_mode='Markdown', reply_markup=None)

        show_send_channels_button(chat_id, update_template)
        # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        signals[chat_id] = {}

@bot.message_handler(func=lambda message: message.text == 'UPDATE –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç')
def update_tp_command(message):
    chat_id = message.chat.id
    signals[chat_id] = {}
    bot.send_message(chat_id, '–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä:')
    bot.register_next_step_handler(message, update_tp_ticker_callback)

def update_tp_ticker_callback(message):
    chat_id = message.chat.id
    text = message.text.upper()
    if not text.isalpha():
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –±—É–∫–≤–∞–º–∏:')
        bot.register_next_step_handler(message, update_tp_ticker_callback)
    else:
        signals[chat_id]['ticker'] = text
        update_tp_keyboard = types.ReplyKeyboardMarkup(row_width=3)
        one_target_button = types.KeyboardButton('1 —Ü–µ–ª—å')
        two_targets_button = types.KeyboardButton('2 —Ü–µ–ª–∏')
        three_targets_button = types.KeyboardButton('3 —Ü–µ–ª–∏')
        update_tp_keyboard.add(one_target_button, two_targets_button, three_targets_button)
        bot.send_message(chat_id, '–°–∫–æ–ª—å–∫–æ —Ü–µ–ª–µ–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ?', reply_markup=update_tp_keyboard)
        bot.register_next_step_handler(message, update_tp_choice_callback)

def update_tp_choice_callback(message):
    chat_id = message.chat.id
    text = message.text
    if text not in ['1 —Ü–µ–ª—å', '2 —Ü–µ–ª–∏', '3 —Ü–µ–ª–∏']:
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã—Ö —Ü–µ–ª–µ–π –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:')
        bot.register_next_step_handler(message, update_tp_choice_callback)
    else:
        num_of_targets = int(text[0])
        update_template = f"UPDATE‚ùóÔ∏è #{signals[chat_id]['ticker']}\n\n"
        for i in range(num_of_targets):
            update_template += f"–¶–µ–ª—å {i + 1} - üíµ\n\n"
        bot.send_message(chat_id, update_template, parse_mode='Markdown', reply_markup=None)

        show_send_channels_button(chat_id, update_template)
        # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        signals[chat_id] = {}
@bot.message_handler(func=lambda message: message.text == 'UPDATE –û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏/SL/–ë–£')
def update_cancel_command(message):
    chat_id = message.chat.id
    signals[chat_id] = {}
    bot.send_message(chat_id, '–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä:')
    bot.register_next_step_handler(message, update_cancel_ticker_callback)

def update_cancel_ticker_callback(message):
    chat_id = message.chat.id
    text = message.text.upper()
    if not text.isalpha():
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –±—É–∫–≤–∞–º–∏:')
        bot.register_next_step_handler(message, update_cancel_ticker_callback)
    else:
        signals[chat_id]['ticker'] = text
        update_cancel_keyboard = types.ReplyKeyboardMarkup(row_width=3)
        cancel_button = types.KeyboardButton('–û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏')
        stop_button = types.KeyboardButton('–í—ã—Ö–æ–¥ –ø–æ —Å—Ç–æ–ø—É')
        bu_button = types.KeyboardButton('–í—ã—Ö–æ–¥ –≤ –ë–£ —Å –ø—Ä–∏–±—ã–ª—å—é')
        update_cancel_keyboard.add(cancel_button, stop_button, bu_button)
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', reply_markup=update_cancel_keyboard)
        bot.register_next_step_handler(message, update_cancel_choice_callback)

def update_cancel_choice_callback(message):
    chat_id = message.chat.id
    text = message.text
    if text not in ['–û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏', '–í—ã—Ö–æ–¥ –ø–æ —Å—Ç–æ–ø—É', '–í—ã—Ö–æ–¥ –≤ –ë–£ —Å –ø—Ä–∏–±—ã–ª—å—é']:
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:')
        bot.register_next_step_handler(message, update_cancel_choice_callback)
    else:
        if text == '–û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏':
            update_template = f"UPDATE‚ùóÔ∏è #{signals[chat_id]['ticker']}\n\n‚ùå –û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏"
        elif text == '–í—ã—Ö–æ–¥ –ø–æ —Å—Ç–æ–ø—É':
            update_template = f"UPDATE‚ùóÔ∏è #{signals[chat_id]['ticker']}\n\n‚õîÔ∏è –í—ã—Ö–æ–¥ –ø–æ —Å—Ç–æ–ø—É, —Å–¥–µ–ª–∫–∞ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞"
        elif text == '–í—ã—Ö–æ–¥ –≤ –ë–£ —Å –ø—Ä–∏–±—ã–ª—å—é':
            update_template = f"UPDATE‚ùóÔ∏è #{signals[chat_id]['ticker']}\n\nüí∞ –í—ã—Ö–æ–¥ –≤ –ë–£ —Å –ø—Ä–∏–±—ã–ª—å—é"

        bot.send_message(chat_id, update_template, parse_mode='Markdown', reply_markup=None)

        show_send_channels_button(chat_id, update_template)
        # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        signals[chat_id] = {}

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()





